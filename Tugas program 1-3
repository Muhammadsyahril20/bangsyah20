class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    Node root;

    public BinaryTree() {
        root = null;
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Membangun pohon
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        tree.root.left.left.left = new Node(8);
        tree.root.left.right.left= new Node(9);
        tree.root.right.left.left = new Node(10);

        // Menampilkan struktur pohon
        System.out.println("Struktur Pohon:");
        printTree(tree.root);
    }

    // Fungsi rekursif untuk mencetak struktur pohon
    static void printTree(Node node) {
        if (node == null)
            return;

        // Cetak node saat ini
        System.out.print(node.data + " ");

        // Rekursi untuk anak kiri dan kanan
        printTree(node.left);
        printTree(node.right);
    }
}



import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinarySearchTree {
    Node root;

    BinarySearchTree() {
        root = null;
    }

    void insert(int data) {
        root = insertRec(root, data);
    }

    Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }

        if (data < root.data)
            root.left = insertRec(root.left, data);
        else if (data > root.data)
            root.right = insertRec(root.right, data);

        return root;
    }

    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.data + " ");
            inorderRec(root.right);
        }
    }

    void preorder() {
        preorderRec(root);
    }

    void preorderRec(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorderRec(root.left);
            preorderRec(root.right);
        }
    }

    void postorder() {
        postorderRec(root);
    }

    void postorderRec(Node root) {
        if (root != null) {
            postorderRec(root.left);
            postorderRec(root.right);
            System.out.print(root.data + " ");
        }
    }

    void levelOrder() {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node tempNode = queue.poll();
            System.out.print(tempNode.data + " ");

            if (tempNode.left != null)
                queue.add(tempNode.left);

            if (tempNode.right != null)
                queue.add(tempNode.right);
        }
    }

    void printTree() {
        printTree(root, "");
    }

    void printTree(Node node, String prefix) {
        if (node != null) {
            System.out.println(prefix + "└── " + node.data);

            if (node.left != null) {
                System.out.print(prefix + "    ");
                printTree(node.left, "├── ");
            }

            if (node.right != null) {
                System.out.print(prefix + "    ");
                printTree(node.right, "└── ");
            }
        }
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(50);
        tree.insert(30);
        tree.insert(70);
        tree.insert(10);
        tree.insert(35);
        tree.insert(65);
        tree.insert(80);

        System.out.println("Inorder traversal of the BST:");
        tree.inorder();

        System.out.println("\nPreorder traversal of the BST:");
        tree.preorder();

        System.out.println("\nPostorder traversal of the BST:");
        tree.postorder();

        System.out.println("\nLevel Order traversal of the BST:");
        tree.levelOrder();

        System.out.println("\nTree structure:");
        tree.printTree();
    }
}




import java.util.LinkedList;
import java.util.Queue;

class TreeNode {
    String data;
    TreeNode left;
    TreeNode right;

    public TreeNode(String data) {
        this.data = data;
        left = right = null;
    }
}

class BinarySearchTree {
    TreeNode root;

    public BinarySearchTree() {
        root = null;
    }

    // Metode untuk menyisipkan node baru dalam BST
    public TreeNode insert(TreeNode root, String data) {
        if (root == null) {
            root = new TreeNode(data);
            return root;
        }

        if (data.compareTo(root.data) < 0) {
            root.left = insert(root.left, data);
        } else if (data.compareTo(root.data) > 0) {
            root.right = insert(root.right, data);
        }

        return root;
    }

    // Metode untuk melakukan traversal preorder
    public void preorderTraversal(TreeNode root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorderTraversal(root.left);
            preorderTraversal(root.right);
        }
    }

    // Metode untuk melakukan traversal inorder
    public void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.data + " ");
            inorderTraversal(root.right);
        }
    }

    // Metode untuk melakukan traversal postorder
    public void postorderTraversal(TreeNode root) {
        if (root != null) {
            postorderTraversal(root.left);
            postorderTraversal(root.right);
            System.out.print(root.data + " ");
        }
    }

    // Metode untuk melakukan traversal level-order
    public void levelOrderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            System.out.print(current.data + " ");

            if (current.left != null) {
                queue.add(current.left);
            }

            if (current.right != null) {
                queue.add(current.right);
            }
        }
    }

    // Metode untuk mencetak struktur pohon
    public static void printTreeStructure(TreeNode node, String prefix, boolean isLeft) {
        if (node != null) {
            System.out.println(prefix + (isLeft ? "├── " : "└── ") + node.data);
            printTreeStructure(node.left, prefix + (isLeft ? "│   " : "    "), true);
            printTreeStructure(node.right, prefix + (isLeft ? "│   " : "    "), false);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        // Menyusun tree seperti yang dijelaskan
        tree.root = tree.insert(tree.root, "mango");
        tree.root = tree.insert(tree.root, "apple");
        tree.root = tree.insert(tree.root, "banana");
        tree.root.right = tree.insert(tree.root.right, "orange");
        tree.root.right = tree.insert(tree.root.right, "grapes");
        tree.root.right.right = tree.insert(tree.root.right.right, "pineapple");
        tree.root.right.right.left = tree.insert(tree.root.right.right.left, "peach");

        // Menampilkan struktur pohon sebelum traversal
        System.out.println("Struktur Pohon:");
        printTreeStructure(tree.root, "", true);

        // Menampilkan hasil dari traversal
        System.out.println("\nPreorder Traversal:");
        tree.preorderTraversal(tree.root);

        System.out.println("\n\nInorder Traversal:");
        tree.inorderTraversal(tree.root);

        System.out.println("\n\nPostorder Traversal:");
        tree.postorderTraversal(tree.root);

        System.out.println("\n\nLevel-order Traversal:");
        tree.levelOrderTraversal(tree.root);
    }
}
